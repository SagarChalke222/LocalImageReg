{"version":3,"file":"saveElement.js","sourceRoot":"","sources":["../../lib/commands/saveElement.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA8D;AAC9D,4CAA2D;AAC3D,gEAA2D;AAC3D,8DAAyD;AACzD,oDAAmE;AAQnE,kDAAiE;AAEjE,oFAA+E;AAC/E,0CAA2C;AAC3C,0EAAqE;AAKrE,SAA8B,WAAW,CACvC,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,OAAoB,EACpB,GAAW,EACX,kBAAsC;;;;;;oBAGhC,KAAgG,kBAAkB,CAAC,GAAG,EAApH,uBAAuB,6BAAA,EAAE,eAAe,qBAAA,EAAE,QAAQ,cAAA,EAAE,eAAe,qBAAA,EAAE,oBAAoB,0BAAA,CAA4B;oBACrH,QAAQ,GAAK,OAAO,SAAZ,CAAa;oBAEvB,mBAAmB,GACvB,qBAAqB,IAAI,kBAAkB,CAAC,MAAM;wBAChD,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,mBAAmB;wBAC/C,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAC;oBAC3C,cAAc,GAClB,gBAAgB,IAAI,kBAAkB,CAAC,MAAM;wBAC3C,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,cAAc;wBAC1C,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC;oBACtC,gBAAgB,GAA8B,kBAAkB,CAAC,MAAM,CAAC,gBAAgB,IAAI,qCAAyB,CAAC;oBACtH,YAAY,GAAkB,kBAAkB,CAAC,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC;oBAC3E,cAAc,GAAkB,kBAAkB,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;oBAG/E,aAAa,GAA4B;wBAC7C,YAAY,cAAA;wBACZ,uBAAuB,yBAAA;wBACvB,mBAAmB,qBAAA;wBACnB,YAAY,cAAA;wBACZ,QAAQ,UAAA;wBACR,YAAY,EAAE,cAAc;wBAC5B,cAAc,gBAAA;wBACd,oBAAoB,sBAAA;qBACrB,CAAC;oBACmD,WAAM,IAAA,0BAAgB,EAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,EAAA;;oBAApG,oBAAoB,GAA2B,SAAqD;oBACpG,gBAAgB,GAAG,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC;oBAC3E,WAAW,GAAG,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC;oBAG/C,WAAM,QAAQ,CAAC,+BAAqB,EAAE,OAAO,EAAE,uBAAuB,CAAC,EAAA;;oBAAzF,eAAe,GAAG,SAAuE;oBAC/F,WAAM,IAAA,eAAO,EAAC,GAAG,CAAC,EAAA;;oBAAlB,SAAkB,CAAC;oBAGS,WAAM,IAAA,kCAAoB,EAAC,OAAO,CAAC,UAAU,CAAC,EAAA;;oBAApE,WAAW,GAAW,SAA8C;oBAGpE,uBAAuB,GAA6B;wBACxD,gBAAgB,kBAAA;wBAChB,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW;wBAC/D,4BAA4B,EAAE,oBAAoB,CAAC,4BAA4B;wBAC/E,SAAS,EAAE,oBAAoB,CAAC,SAAS;wBACzC,KAAK,EAAE,oBAAoB,CAAC,KAAK;wBACjC,WAAW,aAAA;qBACZ,CAAC;oBACmC,WAAM,IAAA,uCAA0B,EAAC;4BACpE,QAAQ,UAAA;4BACR,WAAW,aAAA;4BACX,OAAO,EAAE,uBAAuB;4BAChC,OAAO,SAAA;yBACR,CAAC,EAAA;;oBALI,UAAU,GAAqB,SAKnC;oBAKF,WAAM,QAAQ,CAAC,0BAAgB,EAAE,eAAe,CAAC,EAAA;;oBAAjD,SAAiD,CAAC;oBAIvB,WAAM,IAAA,+BAAsB,EAAC;4BACtD,WAAW,aAAA;4BACX,gBAAgB,kBAAA;4BAChB,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,UAAU,YAAA;4BACV,gBAAgB,kBAAA;yBACjB,CAAC,EAAA;;oBAPI,kBAAkB,GAAG,SAOzB;oBAGI,YAAY,GAA2B;wBAC3C,YAAY,EAAE,OAAO,CAAC,YAAY;wBAClC,WAAW,EAAE,kBAAkB;wBAC/B,mBAAmB,qBAAA;wBACnB,QAAQ,EAAE;4BACR,WAAW,EAAE,oBAAoB,CAAC,WAAW;4BAC7C,UAAU,EAAE,oBAAoB,CAAC,UAAU;4BAC3C,QAAQ,EAAE,oBAAoB,CAAC,QAAQ;4BACvC,eAAe,EAAE,eAAe;yBACjC;wBACD,QAAQ,EAAE;4BACR,WAAW,EAAE,oBAAoB,CAAC,WAAW;4BAC7C,cAAc,EAAE,oBAAoB,CAAC,cAAc;4BACnD,UAAU,EAAE,oBAAoB,CAAC,UAAU;4BAC3C,gBAAgB,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB;4BACzE,eAAe,iBAAA;4BACf,QAAQ,EAAE,oBAAoB,CAAC,QAAQ;4BACvC,eAAe,EAAE,oBAAoB,CAAC,eAAe;4BACrD,OAAO,EAAE,oBAAoB,CAAC,OAAO;4BACrC,IAAI,EAAE,oBAAoB,CAAC,IAAI;4BAC/B,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW;4BAC/D,UAAU,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU;4BAC7D,YAAY,EAAE,oBAAoB,CAAC,YAAY;4BAC/C,eAAe,EAAE,oBAAoB,CAAC,eAAe;4BACrD,YAAY,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY;4BACjE,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW;4BAC/D,GAAG,KAAA;yBACJ;wBACD,YAAY,cAAA;wBACZ,cAAc,gBAAA;wBACd,WAAW,aAAA;wBACX,QAAQ,UAAA;wBACR,YAAY,EAAE,YAAY,CAAC,YAAY;wBACvC,cAAc,gBAAA;qBACf,CAAC;oBAGF,WAAO,IAAA,yBAAe,EAAC,QAAQ,EAAE,YAAY,CAAC,EAAC;;;;CAChD;AArHD,8BAqHC","sourcesContent":["import { takeBase64Screenshot } from '../methods/screenshots';\nimport { makeCroppedBase64Image } from '../methods/images';\nimport beforeScreenshot from '../helpers/beforeScreenshot';\nimport afterScreenshot from '../helpers/afterScreenshot';\nimport { determineElementRectangles } from '../methods/rectangles';\nimport { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces';\nimport { Methods } from '../methods/methods.interface';\nimport { InstanceData } from '../methods/instanceData.interfaces';\nimport { Folders } from '../base.interface';\nimport { SaveElementOptions } from './element.interfaces';\nimport { ElementRectanglesOptions, RectanglesOutput } from '../methods/rectangles.interfaces';\nimport { BeforeScreenshotOptions, BeforeScreenshotResult } from '../helpers/beforeScreenshot.interface';\nimport { DEFAULT_RESIZE_DIMENSIONS } from '../helpers/constants';\nimport { ResizeDimensions } from '../methods/images.interfaces';\nimport scrollElementIntoView from '../clientSideScripts/scrollElementIntoView';\nimport { waitFor } from '../helpers/utils';\nimport scrollToPosition from '../clientSideScripts/scrollToPosition';\n\n/**\n * Saves an image of an element\n */\nexport default async function saveElement(\n  methods: Methods,\n  instanceData: InstanceData,\n  folders: Folders,\n  element: HTMLElement,\n  tag: string,\n  saveElementOptions: SaveElementOptions,\n): Promise<ScreenshotOutput> {\n  // 1a. Set some variables\n  const { addressBarShadowPadding, formatImageName, logLevel, savePerInstance, toolBarShadowPadding } = saveElementOptions.wic;\n  const { executor } = methods;\n  // 1b. Set the method options to the right values\n  const disableCSSAnimation: boolean =\n    'disableCSSAnimation' in saveElementOptions.method\n      ? saveElementOptions.method.disableCSSAnimation\n      : saveElementOptions.wic.disableCSSAnimation;\n  const hideScrollBars: boolean =\n    'hideScrollBars' in saveElementOptions.method\n      ? saveElementOptions.method.hideScrollBars\n      : saveElementOptions.wic.hideScrollBars;\n  const resizeDimensions: ResizeDimensions | number = saveElementOptions.method.resizeDimensions || DEFAULT_RESIZE_DIMENSIONS;\n  const hideElements: HTMLElement[] = saveElementOptions.method.hideElements || [];\n  const removeElements: HTMLElement[] = saveElementOptions.method.removeElements || [];\n\n  // 2.  Prepare the beforeScreenshot\n  const beforeOptions: BeforeScreenshotOptions = {\n    instanceData,\n    addressBarShadowPadding,\n    disableCSSAnimation,\n    hideElements,\n    logLevel,\n    noScrollBars: hideScrollBars,\n    removeElements,\n    toolBarShadowPadding,\n  };\n  const enrichedInstanceData: BeforeScreenshotResult = await beforeScreenshot(executor, beforeOptions, true);\n  const devicePixelRatio = enrichedInstanceData.dimensions.window.devicePixelRatio;\n  const isLandscape = enrichedInstanceData.dimensions.window.isLandscape;\n\n  // Scroll the element into top of the viewport and return the current scroll position\n  const currentPosition = await executor(scrollElementIntoView, element, addressBarShadowPadding);\n  await waitFor(500);\n\n  // 3.  Take the screenshot\n  const base64Image: string = await takeBase64Screenshot(methods.screenShot);\n\n  // 4.  Determine the rectangles\n  const elementRectangleOptions: ElementRectanglesOptions = {\n    devicePixelRatio,\n    innerHeight: enrichedInstanceData.dimensions.window.innerHeight,\n    isAndroidNativeWebScreenshot: enrichedInstanceData.isAndroidNativeWebScreenshot,\n    isAndroid: enrichedInstanceData.isAndroid,\n    isIos: enrichedInstanceData.isIos,\n    isLandscape,\n  };\n  const rectangles: RectanglesOutput = await determineElementRectangles({\n    executor,\n    base64Image,\n    options: elementRectangleOptions,\n    element,\n  });\n\n  // When the screenshot has been taken and the element position has been determined,\n  // we can scroll back to the original position\n  // We don't need to wait for the scroll here because we don't take a screenshot after this\n  await executor(scrollToPosition, currentPosition);\n\n  // 5.  Make a cropped base64 image with resizeDimensions\n  // @TODO: we have isLandscape here\n  const croppedBase64Image = await makeCroppedBase64Image({\n    base64Image,\n    devicePixelRatio,\n    isLandscape,\n    logLevel,\n    rectangles,\n    resizeDimensions,\n  });\n\n  // 6.  The after the screenshot methods\n  const afterOptions: AfterScreenshotOptions = {\n    actualFolder: folders.actualFolder,\n    base64Image: croppedBase64Image,\n    disableCSSAnimation,\n    filePath: {\n      browserName: enrichedInstanceData.browserName,\n      deviceName: enrichedInstanceData.deviceName,\n      isMobile: enrichedInstanceData.isMobile,\n      savePerInstance: savePerInstance,\n    },\n    fileName: {\n      browserName: enrichedInstanceData.browserName,\n      browserVersion: enrichedInstanceData.browserVersion,\n      deviceName: enrichedInstanceData.deviceName,\n      devicePixelRatio: enrichedInstanceData.dimensions.window.devicePixelRatio,\n      formatImageName,\n      isMobile: enrichedInstanceData.isMobile,\n      isTestInBrowser: enrichedInstanceData.isTestInBrowser,\n      logName: enrichedInstanceData.logName,\n      name: enrichedInstanceData.name,\n      outerHeight: enrichedInstanceData.dimensions.window.outerHeight,\n      outerWidth: enrichedInstanceData.dimensions.window.outerWidth,\n      platformName: enrichedInstanceData.platformName,\n      platformVersion: enrichedInstanceData.platformVersion,\n      screenHeight: enrichedInstanceData.dimensions.window.screenHeight,\n      screenWidth: enrichedInstanceData.dimensions.window.screenWidth,\n      tag,\n    },\n    hideElements,\n    hideScrollBars,\n    isLandscape,\n    logLevel,\n    platformName: instanceData.platformName,\n    removeElements,\n  };\n\n  // 7.  Return the data\n  return afterScreenshot(executor, afterOptions);\n}\n"]}